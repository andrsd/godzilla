# Godzilla

add_library(godzilla
    SHARED
        # factory must be first
        Factory.cpp
        App.cpp
        AuxiliaryField.cpp
        BoundaryCondition.cpp
        BoxMesh.cpp
        CallStack.cpp
        CmdLineArgParser.cpp
        ConstantIC.cpp
        DirichletBC.cpp
        EssentialBC.cpp
        ExodusIIMesh.cpp
        ExodusIIOutput.cpp
        FENonlinearProblem.cpp
        FEProblemInterface.cpp
        FileOutput.cpp
        Function.cpp
        FunctionAuxiliaryField.cpp
        FunctionEvaluator.cpp
        FunctionIC.cpp
        FunctionInterface.cpp
        Grid.cpp
        GYMLFile.cpp
        HDF5Output.cpp
        ImplicitFENonlinearProblem.cpp
        Init.cpp
        InitialCondition.cpp
        InputParameters.cpp
        L2Diff.cpp
        LinearInterpolation.cpp
        LinearProblem.cpp
        LineMesh.cpp
        Logger.cpp
        NaturalBC.cpp
        NonlinearProblem.cpp
        Object.cpp
        Output.cpp
        PiecewiseLinear.cpp
        Postprocessor.cpp
        PrintInterface.cpp
        Problem.cpp
        RectangleMesh.cpp
        StructuredGrid1D.cpp
        StructuredGrid2D.cpp
        Terminal.cpp
        TransientInterface.cpp
        UnstructuredMesh.cpp
        Utils.cpp
        VTKOutput.cpp
)
target_code_coverage(godzilla)
target_sanitization(godzilla)

set_target_properties(
    godzilla
    PROPERTIES
        UNITY_BUILD_MODE BATCH
)

target_include_directories(
    godzilla
    PRIVATE
        ${CONDA_INCLUDE_DIR}
        ${HDF5_INCLUDE_DIR}
        ${PETSC_INCLUDE_DIR}
        ${PROJECT_BINARY_DIR}
        ${MUPARSER_INCLUDE_DIR}
        ${YAML_CPP_INCLUDE_DIR}
        ${PROJECT_SOURCE_DIR}/include
        ${PROJECT_SOURCE_DIR}/contrib
)

target_link_libraries(
    godzilla
    PUBLIC
        muparser
        yaml-cpp
        ${PETSC_LIBRARY}
)
