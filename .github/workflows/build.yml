name: build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: "${{ matrix.os }}, ${{ matrix.build }}, py-${{ matrix.python-version }}, petsc-${{ matrix.petsc }}, teciocpp-${{ matrix.teciocpp }}"
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            python-version: "3.11"
            petsc: 3.22.5
            build: Debug
            teciocpp: ON
            code-coverage: ON
          - os: ubuntu-22.04
            python-version: "3.11"
            petsc: 3.22.5
            build: Release
            teciocpp: ON
            code-coverage: OFF
          - os: ubuntu-22.04
            python-version: "3.11"
            petsc: 3.22.5
            build: Release
            teciocpp: OFF
            code-coverage: OFF
    runs-on: ${{ matrix.os }}
    steps:
      - name: Set up miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ matrix.python-version }}
          auto-update-conda: false
          channels: andrsd,defaults

      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          conda install \
            cmake \
            make \
            mpich-mpicxx \
            mpicpp-lite=2.* \
            spdlog=1.* \
            h5pp==1.11.* \
            petsc==${{ matrix.petsc }} \
            fmt=11.* \
            yaml-cpp=0.8.0 \
            exodusIIcpp=3.* \
            teciocpp \
            gtest \
            lcov

      - name: Configure
        run: |
          cmake -S ${{ github.workspace }} -B ${{ github.workspace }}/build \
            -DCMAKE_BUILD_TYPE=${{ matrix.build }} \
            -DGCOV_PATH=`which x86_64-conda-linux-gnu-gcov` \
            -DGODZILLA_WITH_TECIOCPP=${{ matrix.teciocpp }} \
            -DGODZILLA_BUILD_EXAMPLES=YES \
            -DGODZILLA_BUILD_TESTS=YES \
            -DGODZILLA_CODE_COVERAGE=${{ matrix.code-coverage }}

      - name: Build
        run: make -C ${{ github.workspace }}/build

      - name: Run tests
        run: |
          ${{ github.workspace }}/build/test/godzilla-test \
            --gtest_output=xml:${{ github.workspace }}/build/gtest-results.xml

      - name: Test summary
        uses: test-summary/action@v2
        if: always()
        with:
          paths: |
            ${{ github.workspace }}/build/gtest-results.xml
          show: "fail, skip"

      - name: Upload test results to codecov.io
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ${{ github.workspace }}/build/gtest-results.xml
          name: ${{ matrix.os }}-${{ matrix.build }}-petsc-${{ matrix.petsc }}-teciocpp-${{ matrix.teciocpp }}

      - name: Generate code coverage
        if: ${{ matrix.code-coverage == 'ON' }}
        run: make -C ${{ github.workspace }}/build coverage

      - name: Upload coverage artifact
        if: ${{ matrix.code-coverage == 'ON' }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}-${{ matrix.build }}-petsc-${{ matrix.petsc }}-teciocpp-${{ matrix.teciocpp }}
          path: ${{ github.workspace }}/build/coverage.info

  upload-to-codecov:
    needs: [build]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Upload to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
