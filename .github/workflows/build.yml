name: C/C++ CI

on:
  push:
    branches:
      - godzilla
  pull_request:
    branches:
      - godzilla

jobs:
  linux:
    runs-on: ubuntu-latest
    name: ubuntu
    env:
      PETSC_VERSION: 3.16.1
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          sudo apt-get update -qq
          sudo apt install cmake llvm-12 libyaml-cpp-dev gfortran-10
      - name: Cache PETSc
        id: cache-petsc
        uses: actions/cache@v2
        with:
          path: ${{github.workspace}}/petsc
          key: ${{ runner.os }}-petsc-cache-${{ hashFiles('**/petsc-*/PKG-INFO') }}
          restore-keys: |
            ${{ runner.os }}-petsc-cache-
      - name: Build PETSc
        if: steps.cache-petsc.outputs.cache-hit != 'true'
        run: |
          wget https://ftp.mcs.anl.gov/pub/petsc/release-snapshots/petsc-${PETSC_VERSION}.tar.gz
          tar -xzf petsc-${PETSC_VERSION}.tar.gz
          cd petsc-${PETSC_VERSION}
          ./configure \
            --prefix=${{github.workspace}}/petsc \
            --shared-libraries \
            --with-debugging=no \
            --with-cxx-dialect=C++11 \
            --with-pic=yes \
            --with-ssl=no \
            --download-mpich=yes \
            --download-zlib
            PETSC_DIR=`pwd`
          make PETSC_DIR=`pwd`
          make install
      - name: Configure
        env:
          CC: ${{github.workspace}}/petsc/bin/mpicc
          CXX: ${{github.workspace}}/petsc/bin/mpicxx
          PETSC_DIR: ${{github.workspace}}/petsc
        run: cmake -S . -B ${{github.workspace}}/build -DBUILD_EXAMPLES=YES -DBUILD_TESTS=YES
      - name: Build
        run: make -C ${{github.workspace}}/build

  macosx:
    runs-on: macos-latest
    name: macos
    env:
      PETSC_VERSION: 3.16.1
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
      - name: Install conda
        uses: s-weigand/setup-conda@v1
        with:
          conda-channels: conda-forge
      - name: Cache conda env
        uses: actions/cache@v2
        with:
          path: /usr/local/miniconda
          key: ${{ runner.os }}-miniconda-cache-${{ hashFiles('**/conda-meta/*.json') }}
          restore-keys: |
            ${{ runner.os }}-miniconda-cache-
      - name: Install dependencies
        run: conda install python clang gfortran autoconf automake libtool cmake yaml-cpp
      - name: Cache PETSc
        id: cache-petsc
        uses: actions/cache@v2
        with:
          path: ${{github.workspace}}/petsc
          key: ${{ runner.os }}-petsc-cache-${{ hashFiles('**/petsc-*/PKG-INFO') }}
          restore-keys: |
            ${{ runner.os }}-petsc-cache-
      - name: Build PETSc
        if: steps.cache-petsc.outputs.cache-hit != 'true'
        run: |
          wget https://ftp.mcs.anl.gov/pub/petsc/release-snapshots/petsc-${PETSC_VERSION}.tar.gz
          tar -xzf petsc-${PETSC_VERSION}.tar.gz
          cd petsc-${PETSC_VERSION}
          ./configure \
            --prefix=${{github.workspace}}/petsc \
            --shared-libraries \
            --with-debugging=no \
            --with-cxx-dialect=C++11 \
            --with-pic=yes \
            --with-ssl=no \
            --download-mpich=yes \
            --download-zlib=yes \
            PETSC_DIR=`pwd`
          make PETSC_DIR=`pwd`
          make install
      - name: Configure
        env:
          CC: ${{github.workspace}}/petsc/bin/mpicc
          CXX: ${{github.workspace}}/petsc/bin/mpicxx
          PETSC_DIR: ${{github.workspace}}/petsc
        run: |
          cmake -S . -B ${{github.workspace}}/build \
            -DCONDA_INCLUDE_DIR=/usr/local/miniconda/include \
            -DCONDA_LIB_DIR=/usr/local/miniconda/lib \
            -DBUILD_EXAMPLES=YES \
            -DBUILD_TESTS=YES
      - name: Build
        run: make -C ${{github.workspace}}/build
