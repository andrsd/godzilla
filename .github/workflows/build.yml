name: build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  linux:
    runs-on: ubuntu-latest
    name: ubuntu
    env:
      PETSC_VERSION: 3.16.1
      PETSC_CACHE_NUM: 1
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          sudo apt-get update -qq
          sudo apt install llvm-12 gfortran-10
      - name: Cache PETSc
        id: cache-petsc
        uses: actions/cache@v2
        with:
          path: ${{github.workspace}}/petsc
          key: ${{ runner.os }}-petsc-cache-${{ env.PETSC_CACHE_NUM }}
          restore-keys: |
            ${{ runner.os }}-petsc-cache-${{ env.PETSC_CACHE_NUM }}
      - name: Build PETSc
        if: steps.cache-petsc.outputs.cache-hit != 'true'
        run: |
          cd ${{github.workspace}}
          wget https://ftp.mcs.anl.gov/pub/petsc/release-snapshots/petsc-${PETSC_VERSION}.tar.gz
          tar -xzf petsc-${PETSC_VERSION}.tar.gz
          cd petsc-${PETSC_VERSION}
          ./configure \
            --shared-libraries \
            --with-debugging=no \
            --with-cxx-dialect=cxx14 \
            --with-pic=yes \
            --with-ssl=no \
            --download-mpich=yes \
            --download-chaco=yes \
            --download-ptscotch=yes \
            --download-ml=yes \
            --download-hypre=yes \
            --download-fblaslapack=yes \
            --download-metis=yes \
            --download-parmetis=yes \
            --download-superlu=yes \
            --download-superlu_dist=yes \
            --download-scalapack=yes \
            --download-mumps=yes \
            --download-exodusii=yes \
            --download-hdf5=yes \
            --download-netcdf=yes \
            --download-pnetcdf=yes \
            --download-zlib=yes \
            --download-cmake=yes \
            CC=clang-12 CXX=clang++-12 CXXFLAGS=-stdlib=libc++ FC=gfortran-10 \
            PETSC_DIR=`pwd`
          make PETSC_DIR=`pwd` PETSC_ARCH=arch-linux-c-opt all
      - name: Configure
        env:
          CC: mpicc
          CXX: mpicxx
          PETSC_DIR: ${{github.workspace}}/petsc-${PETSC_VERSION}
          PETSC_ARCH: arch-linux-c-opt
        run: |
          echo "${{github.workspace}}/petsc-${PETSC_VERSION}/${PETSC_ARCH}/bin" >> $GITHUB_PATH
          cmake -S . -B ${{github.workspace}}/build \
            -DBUILD_EXAMPLES=YES \
            -DBUILD_TESTS=YES \
            -DCODE_COVERAGE=YES
      - name: Build
        run: make -C ${{github.workspace}}/build
      - name: Run tests
        run: ctest --test-dir ${{github.workspace}}/build -VV
      - name: Generate code coverage
        run: make -C ${{github.workspace}}/build coverage
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v2
        with:
          name: linux-coverage
          path: ${{github.workspace}}/build/coverage.info

  macosx:
    runs-on:  macos-10.15
    name: macos
    env:
      CONDA_CACHE_NUM: 0
      PETSC_VERSION: 3.16.1
      PETSC_CACHE_NUM: 1
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
      - name: Install conda
        uses: s-weigand/setup-conda@v1
        with:
          conda-channels: conda-forge
      - name: Cache conda env
        uses: actions/cache@v2
        with:
          path: /usr/local/miniconda
          key: ${{ runner.os }}-miniconda-cache-${{ env.CONDA_CACHE_NUM }}
          restore-keys: |
            ${{ runner.os }}-miniconda-cache-${{ env.CONDA_CACHE_NUM }}
      - name: Install dependencies
        run: conda install python clang gfortran autoconf automake libtool
      - name: Cache PETSc
        id: cache-petsc
        uses: actions/cache@v2
        with:
          path: ${{github.workspace}}/petsc
          key: ${{ runner.os }}-petsc-cache-${{ env.PETSC_CACHE_NUM }}
          restore-keys: |
            ${{ runner.os }}-petsc-cache-${{ env.PETSC_CACHE_NUM }}
      - name: Build PETSc
        if: steps.cache-petsc.outputs.cache-hit != 'true'
        run: |
          cd ${{github.workspace}}
          wget https://ftp.mcs.anl.gov/pub/petsc/release-snapshots/petsc-${PETSC_VERSION}.tar.gz
          tar -xzf petsc-${PETSC_VERSION}.tar.gz
          cd petsc-${PETSC_VERSION}
          ./configure \
            --shared-libraries \
            --with-debugging=no \
            --with-cxx-dialect=cxx14 \
            --with-pic=yes \
            --with-ssl=no \
            --download-mpich=yes \
            --download-chaco=yes \
            --download-ptscotch=yes \
            --download-ml=yes \
            --download-hypre=yes \
            --download-fblaslapack=yes \
            --download-metis=yes \
            --download-parmetis=yes \
            --download-superlu=yes \
            --download-superlu_dist=yes \
            --download-scalapack=yes \
            --download-mumps=yes \
            --download-exodusii=yes \
            --download-hdf5=yes \
            --download-netcdf=yes \
            --download-pnetcdf=yes \
            --download-zlib=yes \
            --download-cmake=yes \
            CC=clang CXX=clang++ FC=gfortran \
            PETSC_DIR=`pwd`
          make PETSC_DIR=`pwd` PETSC_ARCH=arch-darwin-c-opt all
      - name: Configure
        env:
          CC: mpicc
          CXX: mpicxx
          PETSC_DIR: ${{github.workspace}}/petsc-${PETSC_VERSION}
          PETSC_ARCH: arch-darwin-c-opt
        run: |
          echo "${{github.workspace}}/petsc-${PETSC_VERSION}/${PETSC_ARCH}/bin" >> $GITHUB_PATH
          cmake -S . -B ${{github.workspace}}/build \
            -DBUILD_EXAMPLES=YES \
            -DBUILD_TESTS=YES \
            -DCODE_COVERAGE=YES
      - name: Build
        run: make -C ${{github.workspace}}/build
      - name: Run tests
        run: ctest --test-dir ${{github.workspace}}/build -VV
      - name: Generate code coverage
        run: make -C ${{github.workspace}}/build coverage
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v2
        with:
          name: macosx-coverage
          path: ${{github.workspace}}/build/coverage.info

  upload-to-codecov:
    needs: [macosx, linux]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download artifacts
        uses: actions/download-artifact@v2
      - name: Upload to Codecov
        uses: codecov/codecov-action@v2
