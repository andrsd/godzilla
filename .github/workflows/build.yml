name: build

env:
  SEACAS_VERSION: 2022-08-01
  PETSC_VERSION: 3.18.0

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            compiler: gnu
          - os: macos-11
            compiler: clang
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          path: main

      - name: Set up conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: 3.9
          channels: conda-forge,defaults

      - name: Install dependencies
        shell: bash -l {0}
        run: |
          conda install \
            cmake \
            make \
            fmt \
            clang-14 \
            mpich-mpicc \
            mpich-mpicxx \
            mpich-mpifort \
            netcdf4 \
            petsc=${PETSC_VERSION} \
            yaml-cpp

      - name: Build exodusII
        shell: bash -l {0}
        run: |
          cd ${{ github.workspace }}
          echo "::group::download"
          wget https://github.com/sandialabs/seacas/archive/v${SEACAS_VERSION}.tar.gz
          tar -xzf v${SEACAS_VERSION}.tar.gz
          echo "::endgroup::"
          cd seacas-${SEACAS_VERSION}
          echo "::group::configure"
          export CMAKE_PREFIX_PATH=$CONDA_PREFIX
          export ACCESS=${{ github.workspace }}/seacas-${SEACAS_VERSION}
          export INSTALL_PATH=$CONDA_PREFIX
          export SHARED=YES
          export MPI=YES
          export COMPILER=${{ matrix.compiler }}
          ./cmake-exodus \
            -DSeacas_ENABLE_SEACASExodiff=ON \
            -DSeacas_ENABLE_SEACASExotxt=ON \
            -DSeacas_ENABLE_TESTS=NO \
            -B build -S
          echo "::endgroup::"
          echo "::group::make install"
          make -C ${{ github.workspace }}/seacas-${SEACAS_VERSION}/build install
          echo "::endgroup::"

      - name: Configure
        shell: bash -l {0}
        env:
          CC: mpicc
          CXX: mpicxx
        run: |
          cmake -S ${{ github.workspace }}/main -B ${{ github.workspace }}/main/build \
            -DGODZILLA_BUILD_EXAMPLES=YES \
            -DGODZILLA_BUILD_TESTS=YES \
            -DGODZILLA_CODE_COVERAGE=YES

      - name: Build
        shell: bash -l {0}
        run: make -C ${{ github.workspace }}/main/build

      - name: Run tests
        shell: bash -l {0}
        run: make -C ${{ github.workspace }}/main/build test ARGS='-V'

      - name: Generate code coverage
        shell: bash -l {0}
        run: make -C ${{ github.workspace }}/main/build coverage

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v2
        with:
          name: coverage-${{ matrix.os }}
          path: ${{ github.workspace }}/main/build/coverage.info

  upload-to-codecov:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Upload to Codecov
        uses: codecov/codecov-action@v2

      - name: Run codacy-coverage-reporter
        uses: codacy/codacy-coverage-reporter-action@v1
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: 'coverage-ubuntu-22.04/coverage.info,coverage-macos-11/coverage.info'
